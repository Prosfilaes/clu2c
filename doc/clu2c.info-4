This is Info file clu2c.info, produced by Makeinfo-1.64 from the input
file ./clu2c.texi.

START-INFO-DIR-ENTRY
* clu2c: (clu2c.info).  CLU2C User's Manual.
END-INFO-DIR-ENTRY

   CLU2C User's Manual, by Tetsu Ushijima.

   This file documents CLU2C, an implementation of the programming
language CLU.

   Copyright (C) 1996 Department of Mathematical and Computing Sciences,
Tokyo Institute of Technology.  All rights reserved.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.


File: clu2c.info,  Node: Presetting,  Prev: Options,  Up: Configurations

Presetting `Makefile' Variables
-------------------------------

   You can control values of some `Makefile' variables via environment
variables.  The preset value precedes the value `configure' guesses.
For example, if you want to use `cc' for the C compiler, you can
achieve it by setting the `CC' environment variable to `cc' prior to
running `configure'.  If you use the Bourne shell or its descendant,
you can do like the following:

     CC=cc ./configure

Or, if you have the `env' program, you can do like the following:

     env CC=cc ./configure

The following Makefile variables can be preset in such a way.  Typical
values that `configure' guesses are in square brackets.

`CC'
     C compiler.  [`gcc' or `cc']

`CFLAGS'
     Default options to the C compiler.  [`-O -g' for `gcc', `-g' for
     other C compilers]

`AS'
     Assembler.  [`as']

`LIBS'
     Additional libraries for linking program.  [`-lm']

`LDFLAGS'
     Additional options to the C compiler for linking.  [(empty)]

`AR'
     Archive and library maintainer.  [`ar']

`ARFLAGS'
     Default flags to `ar'.  [`ru']

`RANLIB'
     Library randomizer.  [`ranlib' or `:']


File: clu2c.info,  Node: MS-DOS Installation,  Next: Other Directory,  Prev: Configurations,  Up: Installation

MS-DOS Installation
===================

   There are two choices for installing CLU2C on MS-DOS systems.
Probably most users would like to get a binary distribution package and
install it, without compiling any source code.  On the other hand, you
may want to get a source distribution package and begin the
installation process by compiling source code.  In either case, you
need to install DJGPP prior to the installation of CLU2C.

* Menu:

* Requirements::                You need DJGPP
* From Binary::                 Easier way
* From Source::                 Rather hard way


File: clu2c.info,  Node: Requirements,  Next: From Binary,  Prev: MS-DOS Installation,  Up: MS-DOS Installation

Requirements
------------

   CLU2C on MS-DOS systems requires DJGPP Version 2 (or later) to be
installed.  DJGPP is available via anonymous FTP from SimTel mirror
sites.  At the minimum, you need to get the following files.

   * `v2/djdevXXX.zip'

   * `v2/readme.1st'

   * `v2gnu/bnuXXXb.zip'

   * `v2gnu/gccXXXb.zip'

   * `v2misc/csdpmi1b.zip'

See the file `v2/readme.1st' for more detail about DJGPP.


File: clu2c.info,  Node: From Binary,  Next: From Source,  Prev: Requirements,  Up: MS-DOS Installation

Installing from Binary Distribution Package
-------------------------------------------

   This subsection shows instructions for installing CLU2C on MS-DOS
systems from a binary distribution package.

  1. Make sure that you have installed DJGPP Version 2.00 (or later)
     and `gcc' works fine.

  2. Create an installation directory for CLU2C.  The default is
     `c:\clu2c', although you can choose any other directory.  For
     example, if you choose the default, do like:

          mkdir c:\clu2c

  3. Go to the installation directory you have chosen, like this:

          c:
          cd \clu2c

  4. Unpack the binary distribution package in that directory.  For
     example,

          lha x SOMEWHERE\clu200b.lzh

     or

          unzip SOMEWHERE\clu200b.zip

  5. If you have chosen a directory other than `c:\clu2c' as an
     installation directory, you need to set the `CLU2CROOT'
     environment variable to point to the installation directory.  For
     example, if you have chosen `c:\local\clu2c' as an installation
     directory, put the line

          set CLU2CROOT=c:\local\clu2c

     into your `autoexec.bat'.

  6. Add the `bin' subdirectory of the installation directory
     (`c:\clu2c\bin' for example) to the command search path.  For
     example, put the line

          set PATH=c:\clu2c\bin;%PATH%

     into your `autoexec.bat'.


File: clu2c.info,  Node: From Source,  Prev: From Binary,  Up: MS-DOS Installation

Installing from Source Distribution Package
-------------------------------------------

   This subsection shows instructions for installing CLU2C on MS-DOS
systems from a source distribution package.  We assume that you have
unpacked the source distribution package and are at the top source
directory.

  1. Make sure that you have installed DJGPP Version 2.00 (or later)
     and `gcc', `ar', and `ranlib' work fine.

  2. Make sure that the `make' program you will use to build CLU2C is
     invoked by simply saying `make'.

  3. Type `configure' to run the batch file `configure.bat'.  This
     batch file creates a number of files including `config.h' and
     `config.mk' in the current working directory, and also creates
     `Makefile' in every directory.  Unlike the `configure' script for
     UNIX systems, however, `configure.bat' does not guess
     system-dependent parameters.  Instead, it merely copies
     configuration files from the `config' directory.

  4. Look into `config.h' and `config.mk'.  You may have to modify
     these files manually.  Whenever you modify `config.h', you must
     recompile all the C files that include this header file.  Whenever
     you modify `config.mk', you must re-create makefiles by typing
     `make mkfiles'.

  5. Type `make' to compile the entire package.

  6. Type `make install' to copy a number of files to the installation
     directory.  By default, executable programs are copied to
     `c:\clu2c\bin'; header files are copied to `c:\clu2c\include'; and
     object code archives and other data files are copied to
     `c:\clu2c\lib'.  If nothing seems to happen, rename the file
     `INSTALL' as another name, say `INSTALL.doc', and try again.

  7. Set the `CLU2CROOT' environment variable (if necessary) and the
     command search path, as in installing from binary distribution
     package.

  8. Optionally, type `make distclean' to delete all files that have
     been created by configuring or building the package.


   We have found the difficulty of writing general makefiles for MS-DOS
systems.  In your environment, things might not go well as described
above.  We expect some effort on your side.


File: clu2c.info,  Node: Other Directory,  Next: Common Targets,  Prev: MS-DOS Installation,  Up: Installation

Compiling in a Separate Directory
=================================

   This section shows instructions to compile CLU2C in a separate
directory.

  1. Make sure the `make' program you use has a `VPATH' feature.

  2. Go to the top source directory.

  3. Run the `configure' script in the source directory if you have not
     run.

  4. Make sure that the source directory does not contain any object
     files.  Type `make mostlyclean' if you have no confidence.

  5. Type `make cfiles' to prepare all the C files that are to be
     generated from CLU files.

  6. Prepare a directory where you wish to compile the package and go
     to that directory.

  7. Run the `configure' script.

Now you can compile in the build directory.  Type `make' to compile the
entire package; Type `make install' to install the resulting products.

   For example, if you have unpacked the distribution package into
`/usr/local/src/clu2c-2.0' and want to do compilation in the
`/usr/local/src/clu2c-2.0/build', command lines you type might look
like this:

     cd /usr/local/src/clu2c-2.0
     ./configure
     make mostlyclean cfiles
     mkdir build
     cd build
     ../configure
     make


File: clu2c.info,  Node: Common Targets,  Next: Makefile Structure,  Prev: Other Directory,  Up: Installation

Common Targets
==============

   Here is the list of common targets that are defined in `Makefile' in
almost every directory.  These targets are applied to the current
directory and all its subdirectories recursively.

`all'
     Compile the entire source files.  This is the default target.

`install'
     Compile the entire source files and copy the resulting products to
     the file names where they should reside for actual use.

`clean'
     Remove all the files that are created by running `make'.

`mostlyclean'
     Remove almost all the files that are created by running `make' but
     do not remove C files that are translated directly or indirectly
     from CLU source files.

`distclean'
     Remove all the files that are created by running `configure' and
     `make'.  If you did not create any other files, `make distclean'
     restore the source tree to its original contents.

`mkfiles'
     Recreate `Makefile'.  You have to make this target whenever you
     modify the file `config.mk' manually.

`cfiles'
     Prepare C source files that are translated directly or indirectly
     from CLU source files.  Some `make' programs fail to follow the
     chain of suffix rules.  Particularly, they understand that `foo.o'
     is to be made from `foo.c' but cannot think of this C source file
     being made from `foo.clu'.  In this case, you have to `make
     cfiles' first before you `make all'.


File: clu2c.info,  Node: Makefile Structure,  Next: Distribution,  Prev: Common Targets,  Up: Installation

Makefile Structure
==================

   Every `Makefile' is actually a concatenation of three files:

`Makefile.top'
     This file resides in each directory, and contains variable
     definitions that may vary dependent on how the `configure' script
     is invoked and are specific to each directory.  `VPATH', `srcdir',
     and `top_srcdir' are defined here.  This file is created
     automatically by running the `configure' script.

`config.mk'
     This file resides in the top build directory, and contains
     variable definitions that may vary dependent on how the
     `configure' script is invoked and can be shared by all the
     `Makefile'.  This file is created automatically by running the
     `configure' script.

`Makefile.unix'
`Makefile.dos'
     One of these files constitute the rest of `Makefile'.  These files
     reside in each directory, and contains variable and rule
     definitions that are specific to each directory and should not be
     modified.  These files are included in the source distribution
     package.

   In every directory there is a file named `Makefile.in'.  This file
is processed by the `m4' macro processor to generate `Makefile.unix'
and `Makefile.dos'.  Note that these files are included in the
distribution package and you do not have to prepare the `m4' macro
processor in order to compile CLU2C.


File: clu2c.info,  Node: Distribution,  Prev: Makefile Structure,  Up: Installation

Getting CLU2C
=============

   The source and binary distribution packages of the latest version of
CLU2C is available via anonymous FTP from the host `ftp.is.titech.ac.jp'
at the directory `pub/clu2c'.  The following files are placed at that
directory.

`clu2c-VERSION.tar.Z'
`clu2c-VERSION.tar.gz'
     Source distribution packages for UNIX systems.  These are
     compressed or gzipped tar files.

`cluVERs.lzh'
`cluVERs.zip'
     Source distribution packages for MS-DOS systems.  These are
     archive files archived by `lha' or `zip'.

`cluVERb.lzh'
`cluVERb.zip'
     Binary distribution packages for MS-DOS systems.  These are
     archive files archived by `lha' or `zip'.


File: clu2c.info,  Node: Copying,  Next: Index,  Prev: Installation,  Up: Top

Copying CLU2C
*************

   The following are the terms and conditions for copying, modifying,
and distributing CLU2C.

  1. Part of this software derived from PCLU is subject to the same
     terms and conditions as those applied to PCLU, whether the source
     code has been modified or not.

  2. Part of this software derived from the conservative garbage
     collector is subject to the same terms and conditions as those
     applied to the conservative garbage collector, whether the source
     code has been modified or not.

  3. Permission is granted to use, copy, modify, and distribute part of
     this software derived from neither PCLU nor the conservative
     garbage collector, provided that all copyright notices are
     preserved on all copies and that a verbatim copy of these terms
     and conditions are included in all copies.

  4. THIS SOFTWARE IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY
     EXPRESS OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.


File: clu2c.info,  Node: Index,  Prev: Copying,  Up: Top

Index
*****

* Menu:

* ?:                                    help.
* _all_file_names_:                     _all_file_names_.
* _case:                                _case.
* _change_mode:                         _change_mode.
* _cleanup_:                            _cleanup_.
* _cvt:                                 _cvt.
* _dir_ent_size:                        _dir_ent_size.
* _fixup_dir_part:                      _fixup_dir_part.
* _fixup_file_name:                     _fixup_file_name.
* _gcd on time:                         time$_gcd.
* _get_runtime:                         _get_runtime.
* _home_dir:                            _home_dir.
* _last_indexc:                         _last_indexc.
* _longsub:                             _longsub.
* _qindexc:                             _qindexc.
* _signal:                              _signal.
* _signal_type:                         _signal_type.
* _split_name_part:                     _split_name_part.
* _system_root:                         _system_root.
* _time_format:                         _time_format.
* abs on bigint:                        bigint$abs.
* acos:                                 acos.
* add on bigint:                        bigint$add.
* add on time:                          time$add.
* add on uint:                          uint$add.
* ago:                                  ago.
* all_file_names:                       all_file_names.
* allow:                                allow.
* and on uint:                          uint$and.
* arc cosine:                           acos.
* arc sine:                             asin.
* arc tangent <1>:                      atan2.
* arc tangent:                          atan.
* asin:                                 asin.
* atan:                                 atan.
* atan2:                                atan2.
* average on time:                      time$average.
* base-ten logarithm:                   log10.
* bi2i on bigint:                       bigint$bi2i.
* bigint:                               bigint.
* binsuf:                               binsuf.
* capitalize:                           capitalize.
* ce:                                   ce.
* CE:                                   Compilation Environment.
* char-version:                         char-version.
* check:                                check.
* clu:                                  compile.
* compilation environment:              Compilation Environment.
* compile:                              compile.
* connected_dir:                        connected_dir.
* copy on bigint:                       bigint$copy.
* copy on heap:                         heap$copy.
* copy on time:                         time$copy.
* copy on uint:                         uint$copy.
* cos:                                  cos.
* cosh:                                 cosh.
* cosine:                               cos.
* cosine, arc:                          acos.
* cosine, hyperbolic:                   cosh.
* create on getopt:                     getopt$create.
* create on heap:                       heap$create.
* create on time:                       time$create.
* create on uint:                       uint$create.
* create_long on getopt:                getopt$create_long.
* current_directory:                    current_directory.
* date_parse:                           date_parse.
* date_sub:                             date_sub.
* debug:                                debug.
* decode on bigint:                     bigint$decode.
* decode on time:                       time$decode.
* delete_expunge:                       delete_expunge.
* directory_entry_names:                directory_entry_names.
* directory_file_name:                  directory_file_name.
* div on bigint:                        bigint$div.
* div on time:                          time$div.
* div on uint:                          uint$div.
* drive specification:                  File Name Components.
* dump:                                 dump.
* empty on heap:                        heap$empty.
* encode on bigint:                     bigint$encode.
* encode on time:                       time$encode.
* equal on bigint:                      bigint$equal.
* equal on time:                        time$equal.
* equal on uint:                        uint$equal.
* exp:                                  exp.
* exponential functions:                Exponential and Logarithmic Functions.
* expunge:                              expunge.
* externals:                            externals.
* file_date:                            file_date.
* file_exists:                          file_exists.
* file_is_block_device:                 file_is_block_device.
* file_is_character_device:             file_is_character_device.
* file_is_directory:                    file_is_directory.
* file_is_fifo:                         file_is_fifo.
* file_is_regular:                      file_is_regular.
* file_is_symbolic_link:                file_is_symbolic_link.
* file_name_absolutize:                 file_name_absolutize.
* file_name_apply_directory:            file_name_apply_directory.
* file_name_as_directory:               file_name_as_directory.
* file_name_drive:                      file_name_drive.
* file_name_expand_home_directory:      file_name_expand_home_directory.
* file_name_fill:                       file_name_fill.
* file_name_fill_directory:             file_name_fill_directory.
* file_name_fill_suffix:                file_name_fill_suffix.
* file_name_is_absolute:                file_name_is_absolute.
* file_name_nondirectory:               file_name_nondirectory.
* file_name_proper_directory:           file_name_proper_directory.
* file_name_simplify:                   file_name_simplify.
* force:                                force.
* forget:                               forget.
* format on time:                       time$format.
* functions, exponential:               Exponential and Logarithmic Functions.
* functions, hyperbolic:                Hyperbolic Functions.
* functions, logarithmic:               Exponential and Logarithmic Functions.
* functions, mathematical:              Mathematical Functions.
* functions, power:                     Power Functions.
* functions, trigonometric:             Trigonometric Functions.
* ge on bigint:                         bigint$ge.
* ge on time:                           time$ge.
* ge on uint:                           uint$ge.
* get on _signal:                       _signal$get.
* get_all on time:                      time$get_all.
* get_code on stream:                   Lexical Changes.
* get_days on time:                     time$get_days.
* get_hours on time:                    time$get_hours.
* get_message on _signal:               _signal$get_message.
* get_micros on time:                   time$get_micros.
* get_millis on time:                   time$get_millis.
* get_minutes on time:                  time$get_minutes.
* get_non_options on getopt:            getopt$get_non_options.
* get_optarg on getopt:                 getopt$get_optarg.
* get_opterr on getopt:                 getopt$get_opterr.
* get_optind on getopt:                 getopt$get_optind.
* get_optname on getopt:                getopt$get_optname.
* get_seconds on time:                  time$get_seconds.
* getenv:                               Environment Variables.
* getopt:                               Option Handling.
* gt on bigint:                         bigint$gt.
* gt on time:                           time$gt.
* gt on uint:                           uint$gt.
* hash:                                 hash.
* heap:                                 heap.
* help:                                 help.
* hex_parse on uint:                    uint$hex_parse.
* hex_unparse on uint:                  uint$hex_unparse.
* home_directory:                       home_directory.
* hyperbolic cosine:                    cosh.
* hyperbolic functions:                 Hyperbolic Functions.
* hyperbolic sine:                      sinh.
* hyperbolic tangent:                   tanh.
* i2bi on bigint:                       bigint$i2bi.
* i_and:                                i_and.
* i_first1:                             i_first1.
* i_get:                                i_get.
* i_get1:                               i_get1.
* i_hparse:                             i_hparse.
* i_hunparse:                           i_hunparse.
* i_last1:                              i_last1.
* i_not:                                i_not.
* i_oparse:                             i_oparse.
* i_or:                                 i_or.
* i_ounparse:                           i_ounparse.
* i_rotate:                             i_rotate.
* i_set:                                i_set.
* i_set1:                               i_set1.
* i_shift:                              i_shift.
* i_xor:                                i_xor.
* input_streams:                        input_streams.
* insert on heap:                       heap$insert.
* int_hex_parse:                        int_hex_parse.
* int_hex_unparse:                      int_hex_unparse.
* int_oct_parse:                        int_oct_parse.
* int_oct_unparse:                      int_oct_unparse.
* isqrt:                                isqrt.
* kill:                                 quit.
* le on bigint:                         bigint$le.
* le on time:                           time$le.
* le on uint:                           uint$le.
* lex_scan:                             lex_scan.
* locals:                               locals.
* log:                                  log.
* log10:                                log10.
* logarithm, base-ten:                  log10.
* logarithm, natural:                   log.
* logarithmic functions:                Exponential and Logarithmic Functions.
* lower:                                lower.
* lower_case:                           lower_case.
* lt on bigint:                         bigint$lt.
* lt on time:                           time$lt.
* lt on uint:                           uint$lt.
* mathematical functions:               Mathematical Functions.
* max on bigint:                        bigint$max.
* max on uint:                          uint$max.
* merge:                                merge.
* min on bigint:                        bigint$min.
* min on uint:                          uint$min.
* minus on bigint:                      bigint$minus.
* mod on bigint:                        bigint$mod.
* mod on uint:                          uint$mod.
* mul on bigint:                        bigint$mul.
* mul on time:                          time$mul.
* mul on uint:                          uint$mul.
* natural logarithm:                    log.
* newlib:                               newlib.
* non_options on getopt:                getopt$non_options.
* not on uint:                          uint$not.
* oct_parse on uint:                    uint$oct_parse.
* oct_unparse on uint:                  uint$oct_unparse.
* open_append:                          open_append.
* open_read:                            open_read.
* open_write:                           open_write.
* optarg_is_empty on getopt:            getopt$optarg_is_empty.
* optarg_is_full on getopt:             getopt$optarg_is_full.
* optimize:                             optimize.
* options on getopt:                    getopt$options.
* or on uint:                           uint$or.
* padl:                                 padl.
* padlc:                                padlc.
* padr:                                 padr.
* padrc:                                padrc.
* parse:                                parse.
* parse on bigint:                      bigint$parse.
* parse on time:                        time$parse.
* parse on uint:                        uint$parse.
* parse_line:                           parse_line.
* PI:                                   Trigonometric Functions.
* power functions:                      Power Functions.
* power on bigint:                      bigint$power.
* print on time:                        time$print.
* program_arguments:                    program_arguments.
* program_name:                         program_name.
* quick_sort:                           quick_sort.
* quicksort:                            quicksort.
* quit:                                 quit.
* remblank:                             remblank.
* remove on heap:                       heap$remove.
* run_time:                             run_time.
* safe:                                 safe.
* set on _signal:                       _signal$set.
* set_code on stream:                   Lexical Changes.
* set_connected_dir:                    set_connected_dir.
* set_message on _signal:               _signal$set_message.
* set_opterr on getopt:                 getopt$set_opterr.
* set_output on getopt:                 getopt$set_output.
* shift on uint:                        uint$shift.
* similar on bigint:                    bigint$similar.
* similar on time:                      time$similar.
* similar on uint:                      uint$similar.
* sin:                                  sin.
* sine:                                 sin.
* sine, arc:                            asin.
* sine, hyperbolic:                     sinh.
* sinh:                                 sinh.
* size on heap:                         heap$size.
* slower:                               slower.
* specs:                                specs.
* split_line:                           split_line.
* sqrt:                                 sqrt.
* square root:                          sqrt.
* string-version:                       string-version.
* string_lindexs:                       string_lindexs.
* sub on bigint:                        bigint$sub.
* sub on time:                          time$sub.
* sub on uint:                          uint$sub.
* supper:                               supper.
* system:                               System Command Execution.
* t2r on time:                          time$t2r.
* tan:                                  tan.
* tangent:                              tan.
* tangent, arc <1>:                     atan.
* tangent, arc:                         atan2.
* tangent, hyperbolic:                  tanh.
* tanh:                                 tanh.
* terminate:                            Program Termination.
* time:                                 time.
* to_int on uint:                       uint$to_int.
* top on heap:                          heap$top.
* trigonometric functions:              Trigonometric Functions.
* trim_both:                            trim_both.
* trim_head:                            trim_head.
* trim_tail:                            trim_tail.
* uint:                                 Unsigned Integers.
* unify_spacing:                        unify_spacing.
* unmerge:                              unmerge.
* unparse on bigint:                    bigint$unparse.
* unparse on time:                      time$unparse.
* unparse on uint:                      uint$unparse.
* unset on _signal:                     _signal$unset.
* upper:                                upper.
* upper_case:                           upper_case.
* verify:                               verify.
* width on char:                        Lexical Changes.
* width on string:                      Lexical Changes.
* xce:                                  xce.
* xfile:                                xfile.
* xor on uint:                          uint$xor.


