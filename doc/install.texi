@c install.texi
@c
@c Copyright (c) 1996
@c      Department of Mathematical and Computing Sciences, Tokyo
@c      Institute of Technology.  All rights reserved.
@c
@c This is part of CLU2C User's Manual.  For copying conditions, see
@c the file clu2c.texi.
@c
@c $Id: install.texi,v 2.1 1997/02/05 07:58:27 ushijima Exp $


@c *******************************************************************
@c                        How to Install CLU2C
@c *******************************************************************

@node Installation, Copying, Library, Top
@appendix How to Install CLU2C

@menu
* Basic Installation::          The simplest installation instructions
* Configurations::              How to run the @code{configure} script
* MS-DOS Installation::         How to install on MS-DOS systems
* Other Directory::             How to compile in a separate directory
* Common Targets::              What to make
* Makefile Structure::          Makefile consists of three parts
* Distribution::                How to obtain distribution packages
@end menu

@ifset PLAIN
@format
  * Basic Installation
  * Configurations
  * MS-DOS Installation
  * Compiling in a Separate Directory
  * Common Targets
  * Makefile Structure
  * Getting CLU2C
@end format
@end ifset


@c ===================================================================
@c                         Basic Installation
@c ===================================================================

@node Basic Installation, Configurations, Installation, Installation
@appendixsec Basic Installation

This section shows basic instructions
for installing CLU2C on UNIX systems.
@ifclear PLAIN
@xref{MS-DOS Installation},
@end ifclear
@ifset PLAIN
See the section `MS-DOS Installation'
@end ifset
for the instructions for installing CLU2C on MS-DOS systems.
Now we assume that you have unpacked the source distribution package
and are at the top source directory.

@enumerate
@item
Type @samp{./configure} to run the @code{configure} script.
This script creates a number of files
including @file{config.h} and @file{config.mk}
in the current working directory,
and also creates @file{Makefile} in every directory.
@ifclear PLAIN
@xref{Configurations},
@end ifclear
@ifset PLAIN
See the section `Configurations'
@end ifset
for more detail about the @code{configure} script.
@item
Type @samp{make} to compile the entire package.
@item
Type @samp{make install}
to copy executable programs to @file{/usr/local/lib/clu2c/bin},
header files to @file{/usr/local/lib/clu2c/include},
object code archives and other data files to @file{/usr/local/lib/clu2c/lib},
and two shell scripts to @file{/usr/local/bin}.
@item
Optionally,
type @samp{make distclean}
to delete all files that have been created
by configuring or building the package.
@end enumerate


@c ===================================================================
@c                           Configurations
@c ===================================================================

@node Configurations, MS-DOS Installation, Basic Installation, Installation
@appendixsec Configurations

CLU2C source distribution package
comes with a shell script named @code{configure},
which automatically guesses various system-dependent parameters
used to compile the package.
The first thing to do for installation is running this script.

After guessing system-dependent parameters,
@code{configure} creates the files @file{config.h},
@file{config.mk},
@file{config.status},
@file{config.cache},
@file{config.log},
and @file{fakeclu.sh} in the current directory,
as well as the files @file{Makefile} and @file{Makefile.top}
in every directory.

@menu
* Options::                     Options for @code{configure}
* Presetting::                  Presetting @code{Makefile} variables
@end menu


@c -------------------------------------------------------------------
@c                      Options for `configure'
@c -------------------------------------------------------------------

@node Options, Presetting, Configurations, Configurations
@appendixsubsec Options for @code{configure}

The @code{configure} script recognizes the following options
to control how it operates.

@table @samp
@item --prefix=@var{directory}
Set the common prefix for installation directories to @var{directory}.
The prefix is set to @file{/usr/local} unless this option is specified.
@item --srcdir=@var{directory}
Tell the @code{configure} script where the source code for this package resides.
Usually you do not have to specify this option,
for the @code{configure} script automatically guesses the source directory
based on how it is invoked.
For example,
if you invoke the @code{configure} script by typing @samp{./configure},
the source directory is set to @file{.}.
@item --disable-dynamic-loading
Forbid the garbage collector
to scan data segments associated with dynamic libraries.
This option is mandatory if you use rather old SunOS (3.x or 4.0.x).
@item --with-bsd-byte-operations
Use BSD byte operations such as @code{bcopy} and @code{bcmp},
even if standard memory operations such as @code{memcpy} and @code{memcmp}
are available.
(On NEWS-OS 4.2R,
@code{memcpy} is much slower than @code{bcopy}.)
@item --with-clu2c
Use the installed CLU2C system to compile CLU source files.
You should not specify this option unless CLU2C is already installed.
@item --with-getwd
Use @code{getwd} to get current working directory
even if @code{getcwd} is available.
(On SunOS 3.x and 4.x,
@code{getcwd} invokes @code{pwd}.)
@item --with-gnu-as
Declare that you will use the GNU assembler.
Currently this option has an effect on Sony CISC NEWS only.
@item --with-input-code=@var{coding-system}
Set the default coding system for file input to @var{coding-system}.
It is set to @samp{autoconv} unless this option is specified.
@item --with-output-code=@var{coding-system}
Set the default coding system for file output to @var{coding-system}.
It is set to @samp{iso-2022-jp} unless this option is specified.
@end table

@noindent
The @samp{--with-input-code} and @samp{--with-output-code} options
accept the following names as a specification for coding systems.

@table @samp
@item noconv
No code conversion is performed.
A file is treated as a byte sequence.
@item euc-japan
Japanese EUC.
@item sjis
Shift JIS.
@item iso-2022-jp
ISO-2022-JP.
See @cite{Japanese Character Encoding for Internet Messages} (RFC 1468),
for more detail about this coding system.
@item autoconv
Guess the coding system automatically.
This can be specified only as an input coding system.
@end table


@c -------------------------------------------------------------------
@c                  Presetting `Makefile' Variables
@c -------------------------------------------------------------------

@node Presetting,  , Options, Configurations
@appendixsubsec Presetting @file{Makefile} Variables

You can control values of some @file{Makefile} variables
via environment variables.
The preset value precedes the value @code{configure} guesses.
For example,
if you want to use @code{cc} for the C compiler,
you can achieve it
by setting the @code{CC} environment variable to @code{cc}
prior to running @code{configure}.
If you use the Bourne shell or its descendant,
you can do like the following:

@example
CC=cc ./configure
@end example

@noindent
Or,
if you have the @code{env} program,
you can do like the following:

@example
env CC=cc ./configure
@end example

@noindent
The following Makefile variables can be preset in such a way.
Typical values that @code{configure} guesses are in square brackets.

@table @code
@item CC
C compiler.
[@code{gcc} or @code{cc}]
@item CFLAGS
Default options to the C compiler.
[@code{-O -g} for @code{gcc}, @code{-g} for other C compilers]
@item AS
Assembler.
[@code{as}]
@item LIBS
Additional libraries for linking program.
[@code{-lm}]
@item LDFLAGS
Additional options to the C compiler for linking.
[(empty)]
@item AR
Archive and library maintainer.
[@code{ar}]
@item ARFLAGS
Default flags to @code{ar}.
[@code{ru}]
@item RANLIB
Library randomizer.
[@code{ranlib} or @code{:}]
@end table


@c ===================================================================
@c                        MS-DOS Installation
@c ===================================================================

@node MS-DOS Installation, Other Directory, Configurations, Installation
@appendixsec MS-DOS Installation

There are two choices for installing CLU2C on MS-DOS systems.
Probably most users would like
to get a binary distribution package and install it,
without compiling any source code.
On the other hand,
you may want to get a source distribution package
and begin the installation process by compiling source code.
In either case,
you need to install DJGPP prior to the installation of CLU2C.

@menu
* Requirements::                You need DJGPP
* From Binary::                 Easier way
* From Source::                 Rather hard way
@end menu


@c -------------------------------------------------------------------
@c                            Requirements
@c -------------------------------------------------------------------

@node Requirements, From Binary, MS-DOS Installation, MS-DOS Installation
@appendixsubsec Requirements

CLU2C on MS-DOS systems requires DJGPP Version 2 (or later) to be installed.
DJGPP is available via anonymous FTP from SimTel mirror sites.
At the minimum,
you need to get the following files.

@itemize @bullet
@item
@file{v2/djdev@var{XXX}.zip}
@item
@file{v2/readme.1st}
@item
@file{v2gnu/bnu@var{XXX}b.zip}
@item
@file{v2gnu/gcc@var{XXX}b.zip}
@item
@file{v2misc/csdpmi1b.zip}
@end itemize

@noindent
See the file @file{v2/readme.1st} for more detail about DJGPP.


@c -------------------------------------------------------------------
@c            Installing from Binary Distribution Package
@c -------------------------------------------------------------------

@node From Binary, From Source, Requirements, MS-DOS Installation
@appendixsubsec Installing from Binary Distribution Package

This subsection shows instructions for installing CLU2C on MS-DOS systems
from a binary distribution package.

@enumerate

@item
Make sure that you have installed DJGPP Version 2.00 (or later)
and @code{gcc} works fine.

@item
Create an installation directory for CLU2C.
The default is @file{c:\clu2c},
although you can choose any other directory.
For example,
if you choose the default,
do like:

@example
mkdir c:\clu2c
@end example

@item
Go to the installation directory you have chosen,
like this:

@example
c:
cd \clu2c
@end example

@item
Unpack the binary distribution package in that directory.
For example,

@example
lha x @var{somewhere}\clu200b.lzh
@end example

@noindent
or

@example
unzip @var{somewhere}\clu200b.zip
@end example

@item
If you have chosen a directory other than @file{c:\clu2c}
as an installation directory,
you need to set the @code{CLU2CROOT} environment variable
to point to the installation directory.
For example,
if you have chosen @file{c:\local\clu2c} as an installation directory,
put the line

@example
set CLU2CROOT=c:\local\clu2c
@end example

@noindent
into your @file{autoexec.bat}.

@item
Add the @file{bin} subdirectory of the installation directory
(@file{c:\clu2c\bin} for example)
to the command search path.
For example,
put the line

@example
set PATH=c:\clu2c\bin;%PATH%
@end example

@noindent
into your @file{autoexec.bat}.
@end enumerate


@c -------------------------------------------------------------------
@c            Installing from Source Distribution Package
@c -------------------------------------------------------------------

@node From Source,  , From Binary, MS-DOS Installation
@appendixsubsec Installing from Source Distribution Package

This subsection shows instructions for installing CLU2C on MS-DOS systems
from a source distribution package.
We assume that you have unpacked the source distribution package
and are at the top source directory.

@enumerate

@item
Make sure that you have installed DJGPP Version 2.00 (or later)
and @code{gcc}, @code{ar}, and @code{ranlib} work fine.

@item
Make sure that the @code{make} program you will use to build CLU2C
is invoked by simply saying @samp{make}.

@item
Type @samp{configure} to run the batch file @file{configure.bat}.
This batch file creates a number of files
including @file{config.h} and @file{config.mk}
in the current working directory,
and also creates @file{Makefile} in every directory.
Unlike the @code{configure} script for UNIX systems,
however,
@file{configure.bat} does not guess system-dependent parameters.
Instead,
it merely copies configuration files from the @file{config} directory.

@item
Look into @file{config.h} and @file{config.mk}.
You may have to modify these files manually.
Whenever you modify @file{config.h},
you must recompile all the C files that include this header file.
Whenever you modify @file{config.mk},
you must re-create makefiles by typing @samp{make mkfiles}.

@item
Type @samp{make} to compile the entire package.

@item
Type @samp{make install}
to copy a number of files to the installation directory.
By default,
executable programs are copied to @file{c:\clu2c\bin};
header files are copied to @file{c:\clu2c\include};
and object code archives and other data files
are copied to @file{c:\clu2c\lib}.
If nothing seems to happen,
rename the file @file{INSTALL} as another name,
say @file{INSTALL.doc},
and try again.

@item
Set the @code{CLU2CROOT} environment variable (if necessary)
and the command search path,
as in installing from binary distribution package.

@item
Optionally,
type @samp{make distclean}
to delete all files that have been created
by configuring or building the package.

@end enumerate

We have found the difficulty of writing general makefiles for MS-DOS systems.
In your environment,
things might not go well as described above.
We expect some effort on your side.


@c ===================================================================
@c                 Compiling in a Separate Directory
@c ===================================================================

@node Other Directory, Common Targets, MS-DOS Installation, Installation
@appendixsec Compiling in a Separate Directory

This section shows instructions to compile CLU2C in a separate directory.

@enumerate
@item
Make sure the @code{make} program you use has a @code{VPATH} feature.
@item
Go to the top source directory.
@item
Run the @code{configure} script in the source directory
if you have not run.
@item
Make sure that the source directory does not contain any object files.
Type @samp{make mostlyclean} if you have no confidence.
@item
Type @samp{make cfiles}
to prepare all the C files that are to be generated from CLU files.
@item
Prepare a directory where you wish to compile the package and go to that directory.
@item
Run the @code{configure} script.
@end enumerate

@noindent
Now you can compile in the build directory.
Type @samp{make} to compile the entire package;
Type @samp{make install} to install the resulting products.

For example,
if you have unpacked the distribution package
into @file{/usr/local/src/clu2c-2.0}
and want to do compilation in the @file{/usr/local/src/clu2c-2.0/build},
command lines you type might look like this:

@example
cd /usr/local/src/clu2c-2.0
./configure
make mostlyclean cfiles
mkdir build
cd build
../configure
make
@end example


@c ===================================================================
@c                           Common Targets
@c ===================================================================

@node Common Targets, Makefile Structure, Other Directory, Installation
@appendixsec Common Targets

Here is the list of common targets
that are defined in @file{Makefile} in almost every directory.
These targets are applied to the current directory
and all its subdirectories recursively.

@table @samp
@item all
Compile the entire source files.
This is the default target.
@item install
Compile the entire source files
and copy the resulting products 
to the file names where they should reside for actual use.
@item clean
Remove all the files that are created by running @code{make}.
@item mostlyclean
Remove almost all the files that are created by running @code{make}
but do not remove C files that are translated directly or indirectly
from CLU source files.
@item distclean
Remove all the files
that are created by running @code{configure} and @code{make}.
If you did not create any other files,
@samp{make distclean} restore the source tree to its original contents.
@item mkfiles
Recreate @file{Makefile}.
You have to make this target
whenever you modify the file @file{config.mk} manually.
@item cfiles
Prepare C source files that are translated directly or indirectly
from CLU source files.
Some @code{make} programs fail to follow the chain of suffix rules.
Particularly,
they understand that @file{foo.o} is to be made from @file{foo.c}
but cannot think of this C source file being made from @file{foo.clu}.
In this case,
you have to @samp{make cfiles} first before you @samp{make all}.
@end table


@c ===================================================================
@c                         Makefile Structure
@c ===================================================================

@node Makefile Structure, Distribution, Common Targets, Installation
@appendixsec Makefile Structure

Every @file{Makefile} is actually a concatenation of three files:

@table @file
@item Makefile.top
This file resides in each directory,
and contains variable definitions
that may vary dependent on how the @code{configure} script is invoked
and are specific to each directory.
@code{VPATH}, @code{srcdir}, and @code{top_srcdir} are defined here.
This file is created automatically by running the @code{configure} script.
@item config.mk
This file resides in the top build directory,
and contains variable definitions
that may vary dependent on how the @code{configure} script is invoked
and can be shared by all the @file{Makefile}.
This file is created automatically by running the @code{configure} script.
@item Makefile.unix
@itemx Makefile.dos
One of these files constitute the rest of @file{Makefile}.
These files reside in each directory,
and contains variable and rule definitions
that are specific to each directory
and should not be modified.
These files are included in the source distribution package.
@end table

In every directory there is a file named @file{Makefile.in}.  This file
is processed by the @code{m4} macro processor to generate
@file{Makefile.unix} and @file{Makefile.dos}.
Note that these files are included in the distribution package and you
do not have to prepare the @code{m4} macro processor in order to compile
CLU2C.


@c ===================================================================
@c                           Getting CLU2C
@c ===================================================================

@node Distribution,  , Makefile Structure, Installation
@appendixsec Getting CLU2C

The source and binary distribution packages of the latest version of CLU2C
is available via anonymous FTP
from the host @code{ftp.is.titech.ac.jp}
at the directory @file{pub/clu2c}.
The following files are placed at that directory.

@table @file
@item clu2c-@var{version}.tar.gz
Source distribution packages for UNIX systems.
These are gzipped tar files.
@item clu@var{ver}s.lzh
@itemx clu@var{ver}s.zip
Source distribution packages for MS-DOS systems.
These are archive files archived by @code{lha} or @code{zip}.
@item clu@var{ver}b.lzh
@itemx clu@var{ver}b.zip
Binary distribution packages for MS-DOS systems.
These are archive files archived by @code{lha} or @code{zip}.
@end table
