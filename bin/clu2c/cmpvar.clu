% cmpvar.clu - compiler variables
%
% This file was derived from PCLU distribution (as of 11/18/93), and
% has been modified by Department of Mathematical and Computing
% Sciences, Tokyo Institute of Technology.
%
% Conditions for using, copying, modifying, and distributing this
% file are the same as those of PCLU.
%
% $Id: cmpvar.clu,v 2.4 1996/05/12 07:29:00 ushijima Exp $


%  Copyright	Massachusetts Institute of Technology     1989

cmpvar = cluster is locals, set_locals,
		    force_, set_force_,
		    externals, set_externals,
		    dir, set_dir,
		    suffix, set_suffix,
		    allow, set_allow,
		    expunge, set_expunge,
		    modules, set_modules,
		    version, set_version,
		    date, set_date,
		    stuffs, set_stuffs,
		    debug, set_debug,
		    optimize, optimize_time, not_optimize,
		    set_optimize_space, set_optimize_time, set_not_optimize

    rep = null

    own local_vars: bool := true
    own do_force: bool := true
    own list_externals: bool := false
    own binary_dir: str := ""
    own bin_suffix: str := binary_suffix()
    own allow_errors: bool := false
    own expunge_specs: bool := false
    own reserved_modules: str := ""
    own compiler_version: str := "???"
    own compiler_save_date: str := "???"
    own compiler_stuff: stuff
    own debug_mode:bool := false
    own optimize_mode: int := 0
	%
	% If "clu2c" does not optimize,
	%    optimize_mode=0.
	%
	% If "clu2c" does optimization that do not increase the code size,
	%    optimize_mode=1.
	%
	% If "clu2c" does optimization as possible as it can,
	%    optimize_mode=2.
	%

    locals = proc () returns (bool)
	return(local_vars)
	end locals

    set_locals = proc (b: bool)
	local_vars := b
	end set_locals

    force_ = proc () returns (bool)
	return(do_force)
	end force_

    set_force_ = proc (b: bool)
	do_force := b
	end set_force_

    externals = proc () returns (bool)
	return(list_externals)
	end externals

    set_externals = proc (b: bool)
	list_externals := b
	end set_externals

    dir = proc () returns (str)
	return(binary_dir)
	end dir

    set_dir = proc (s: str)
	binary_dir := s
	end set_dir

    suffix = proc () returns (str)
	return(bin_suffix)
	end suffix

    set_suffix = proc (s: str)
	if str$empty(s)
	   then s := binary_suffix() end
	bin_suffix := s
	end set_suffix

    allow = proc () returns (bool)
	return(allow_errors)
	end allow

    set_allow = proc (b: bool)
	allow_errors := b
	end set_allow

    expunge = proc () returns (bool)
	return(expunge_specs)
	end expunge

    set_expunge = proc (b: bool)
	expunge_specs := b
	end set_expunge

    modules = proc () returns (str)
	return(reserved_modules)
	end modules

    set_modules = proc (s: str)
	reserved_modules := s
	end set_modules

    version = proc () returns (str)
	return(compiler_version)
	end version

    set_version = proc (s: str)
	compiler_version := s
	end set_version

    date = proc () returns (str)
	return(compiler_save_date)
	end date

    set_date = proc (s: str)
	compiler_save_date := s
	end set_date

    stuffs = proc () returns (stuff)
	return(compiler_stuff)
	end stuffs

    set_stuffs = proc (s: stuff)
	compiler_stuff := s
	end set_stuffs

    debug = proc()returns(bool)
	return(debug_mode)
	end debug
    
    set_debug = proc(flag:bool)
	debug_mode := flag
	end set_debug

    optimize = proc() returns(bool)
	return(optimize_mode>0)
	end optimize

    optimize_time = proc() returns(bool)
	return(optimize_mode=2)
	end optimize_time

    not_optimize = proc() returns(bool)
	return(optimize_mode=0)
	end not_optimize

    set_optimize_space = proc()
	optimize_mode := 1
	end set_optimize_space

    set_optimize_time = proc()
	optimize_mode := 2
	end set_optimize_time

    set_not_optimize = proc()
	optimize_mode := 0
	end set_not_optimize

    end cmpvar
